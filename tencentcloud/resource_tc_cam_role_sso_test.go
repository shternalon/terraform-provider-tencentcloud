package tencentcloud

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	cam "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cam/v20190116"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func TestAccTencentCloudCamRoleSSO(t *testing.T) {
	t.Parallel()
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckCamRoleSSODestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccCamRoleSSO,
				Check: resource.ComposeTestCheckFunc(
					testAccCheckCamRoleSSOExists("tencentcloud_cam_role_sso.foo"),
					resource.TestCheckResourceAttrSet("tencentcloud_cam_role_sso.foo", "name"),
					resource.TestCheckResourceAttrSet("tencentcloud_cam_role_sso.foo", "identity_url"),
					resource.TestCheckResourceAttrSet("tencentcloud_cam_role_sso.foo", "identity_key"),
					resource.TestCheckResourceAttrSet("tencentcloud_cam_role_sso.foo", "description"),
					resource.TestCheckResourceAttrSet("tencentcloud_cam_role_sso.foo", "client_ids.#"),
				),
			},
			{
				Config: testAccCamRoleSSOUpdate,
				Check: resource.ComposeTestCheckFunc(
					testAccCheckCamRoleSSOExists("tencentcloud_cam_role_sso.foo"),
					resource.TestCheckResourceAttr("tencentcloud_cam_role_sso.foo", "description", "this is a description1"),
				),
			},
			{
				ResourceName:      "tencentcloud_cam_role_sso.foo",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCheckCamRoleSSODestroy(s *terraform.State) error {

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "tencentcloud_cam_role_sso" {
			continue
		}

		request := cam.NewDescribeOIDCConfigRequest()
		request.Name = helper.String(rs.Primary.ID)
		response, err := testAccProvider.Meta().(*TencentCloudClient).apiV3Conn.UseCamClient().DescribeOIDCConfig(request)
		if err != nil {
			if e, ok := err.(*errors.TencentCloudSDKError); ok {
				if e.GetCode() == "ResourceNotFound.IdentityNotExist" {
					return nil
				}
			}
			return err
		}
		if response != nil && *response.Response.Status != 2 {
			return fmt.Errorf("[Exists] check: CAM-ROLE-SSO %s is still exist!", rs.Primary.ID)
		}
	}
	return nil
}

func testAccCheckCamRoleSSOExists(n string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		rs, ok := s.RootModule().Resources[n]
		if !ok {
			return fmt.Errorf("[Exists] check: CAM-ROLE-SSO %s is not found", n)
		}
		if rs.Primary.ID == "" {
			return fmt.Errorf("[Exists] check: CAM-ROLE-SSO id is not set")
		}
		request := cam.NewDescribeOIDCConfigRequest()
		request.Name = helper.String(rs.Primary.ID)
		response, err := testAccProvider.Meta().(*TencentCloudClient).apiV3Conn.UseCamClient().DescribeOIDCConfig(request)
		if err != nil {
			return err
		}
		if response.Response == nil {
			return fmt.Errorf("[Exists] check: CAM-ROLE-SSO %s is not found", n)
		}
		return nil
	}
}

const testAccCamRoleSSO = `
resource "tencentcloud_cam_role_sso" "foo" {
	name="test"
	identity_url="https://login.microsoftonline.com/ebc33bb0-4c95-4673-9b64-61bfa32cf297/v2.0"
	identity_key=""
	client_ids=["c2856e29-d344-49a9-88ed-de3a01d99753"]
	description="this is a description"
}
`

const testAccCamRoleSSOUpdate = `
resource "tencentcloud_cam_role_sso" "foo" {
	name="test"
	identity_url="https://login.microsoftonline.com/ebc33bb0-4c95-4673-9b64-61bfa32cf297/v2.0"
	identity_key=""
	client_ids=["c2856e29-d344-49a9-88ed-de3a01d99753"]
	description="this is a description1"
}
`
